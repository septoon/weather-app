{"version":3,"sources":["images/preloader.svg","components/WeatherDetails.jsx","api/api.js","redux/weather-reducer.js","components/WeatherDetailsContainer.jsx","components/WeatherIcon.jsx","components/Main.jsx","App.jsx","redux/redux-store.js","index.js"],"names":["WeatherDetails","city","temperature","src","preloader","alt","className","Math","floor","getAdressData","axios","then","response","data","getTemperature","a","adress","SET_CITY","SET_LAT","SET_LON","SET_TEMPERATURE","SET_WEATHER_CODE","TOGGLE_FETCHING","initialState","lat","lon","weatherCode","fetching","setLat","type","setLon","toggleIsFetching","isFetch","weatherReducer","state","action","temp","code","WeatherDetailsContainer","React","Component","componentDidMount","this","props","getAdress","getTemp","render","connect","weatherData","dispatch","latitude","longitude","main","weather","id","coord","time","Date","getHours","isFetching","data-hour","console","log","toString","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"+LAAe,G,MAAA,IAA0B,uC,OCe1BA,MAbf,UAAwB,KAAEC,EAAF,YAAQC,IAC5B,OAAa,OAATD,GAAiC,OAAhBC,EACV,8BAAK,qBAAKC,IAAKC,EAAWC,IAAI,iBAGjC,sBAAKC,UAAU,kBAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBL,IACvB,sBAAKK,UAAU,cAAf,UAA8BC,KAAKC,MAAMN,GAAzC,iB,sCCPhB,MAEaO,EAAgB,IACpBC,MAAA,kDAHM,qCAGyDC,MAAMC,GACnEA,EAASC,OAIPC,EAAc,uCAAG,4BAAAC,EAAA,sEACPN,IADO,cACtBO,EADsB,yBAErBN,MAAA,2DAA8DM,EAAOf,KAArE,yDACNU,MAAKC,GACGA,EAASC,QAJU,2CAAH,qDCRrBI,EAAW,mBACXC,EAAU,kBACVC,EAAU,kBACVC,EAAkB,0BAClBC,EAAmB,2BACnBC,EAAkB,0BAElBC,EAAe,CACnBtB,KAAM,KACNuB,IAAK,GACLC,IAAK,GACLvB,YAAa,KACbwB,YAAa,IACbC,UAAU,GA6BNC,EAAUJ,IAAD,CAAWK,KAAMX,EAASM,QACnCM,EAAUL,IAAD,CAAWI,KAAMV,EAASM,QAG5BM,EAAoBC,IAAD,CAAeH,KAAMP,EAAiBU,YAkBvDC,MAhDQ,CAACC,EAAQX,EAAcY,KAC5C,OAAQA,EAAON,MACb,KAAKZ,EACH,OAAO,2BAAIiB,GAAX,IAAkBjC,KAAMkC,EAAOlC,OAEjC,KAAKiB,EACH,OAAO,2BAAIgB,GAAX,IAAkBV,IAAKW,EAAOX,MAEhC,KAAKL,EACH,OAAO,2BAAIe,GAAX,IAAkBT,IAAKU,EAAOV,MAEhC,KAAKL,EACH,OAAO,2BAAIc,GAAX,IAAkBhC,YAAaiC,EAAOC,OAExC,KAAKf,EACH,OAAO,2BAAIa,GAAX,IAAkBR,YAAaS,EAAOE,OAExC,KAAKf,EACH,OAAO,2BAAIY,GAAX,IAAkBP,SAAUQ,EAAOH,UAErC,QACE,OAAOE,IClCb,MAAMI,UAAgCC,IAAMC,UACxCC,oBACIC,KAAKC,MAAMC,YACXF,KAAKC,MAAME,UAGfC,SACI,OACI,mCACI,cAAC,EAAD,CAAgB7C,KAAMyC,KAAKC,MAAM1C,KACjBC,YAAawC,KAAKC,MAAMzC,iBAYzC6C,mBALUb,IAAD,CACpBjC,KAAMiC,EAAMc,YAAY/C,KACxBC,YAAagC,EAAMc,YAAY9C,eAGK,CAAE0C,UDuBjB,2CAAM,WAAOK,GAAP,eAAAlC,EAAA,sEACNN,IADM,OACvBG,EADuB,OAE7BqC,GATehD,EASEW,EAASX,KATZ,CAAY4B,KAAMZ,EAAUhB,UAU1CgD,EAASrB,EAAOhB,EAASsC,WACzBD,EAASnB,EAAOlB,EAASuC,YAJI,iCAPdlD,QAOc,OAAN,sDCvB4B4C,QD8B9B,2CAAM,WAAOI,GAAP,eAAAlC,EAAA,sEACJD,IADI,OACrBF,EADqB,OAE3BqC,EAASlB,GAAiB,IAC1BkB,GAdsBb,EAcExB,EAASwC,KAAKhB,KAdjB,CAAYP,KAAMT,EAAiBgB,UAexDa,GAdsBZ,EAcEzB,EAASyC,QAAQ,GAAGC,GAdvB,CAAYzB,KAAMR,EAAkBgB,UAezDY,EAASrB,EAAOhB,EAAS2C,MAAM/B,MAC/ByB,EAASnB,EAAOlB,EAAS2C,MAAM9B,MANJ,iCAVLY,MADAD,IAWK,OAAN,sDC9BuCL,oBAA/CgB,CAAoET,GCXpES,mBAJUb,IAAD,CACpBR,YAAaQ,EAAMc,YAAYtB,eAGK,GAAzBqB,EAbK,EAAGrB,kBACnB,MACM8B,GADO,IAAIC,MACCC,WAEZpD,EAAS,iCADIkD,EAAO,GAAKA,EAAO,GAAM,MAAQ,QACrC,YAA0C9B,GAEzD,OAAO,mBAAGpB,UAAWA,OCQVyC,mBAASb,IAAD,CAAayB,WAAYzB,EAAMc,YAAYrB,YAAnDoB,EAZDJ,IAEZ,MACMa,GADO,IAAIC,MACCC,WAClB,OACE,sBAAKpD,UAAU,MAAMsD,YAAWJ,EAAhC,UACI,cAAC,EAAD,IACA,cAAC,EAAD,UCSOT,mBANUb,IAAD,CACpBjC,KAAMiC,EAAMc,YAAY/C,KACxBiD,SAAUhB,EAAMc,YAAYxB,IAC5B2B,UAAWjB,EAAMc,YAAYvB,OAGO,GAAzBsB,EAhBf,UAAa,KAAC9C,EAAD,SAAOiD,EAAP,UAAiBC,IAG1B,OAFAU,QAAQC,IAAIZ,EAASa,YACrBF,QAAQC,IAAIX,GAER,mCACI,cAAC,EAAD,S,uBCNZ,IAAIa,EAAWC,YAAgB,CAC3BjB,YAAaf,IAKFiC,MAFDC,YAAYH,EAAUI,YAAgBC,MCApDC,IAASxB,OACP,cAAC,IAAD,CAAUoB,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEDK,SAASC,eAAe,W","file":"static/js/main.3bac2822.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.7a2846ce.svg\";","import preloader from '../images/preloader.svg'\n\nfunction WeatherDetails({ city, temperature }) {\n    if (city === null || temperature === null) {\n        return <div><img src={preloader} alt=\"Loading...\" /></div>\n    } else {\n        return (\n            <div className=\"weather-details\">\n                <div className=\"city\">{city}</div>\n                <div className=\"temperature\">{Math.floor(temperature)} &deg; C</div>\n            </div>\n        )\n    }\n}\n \nexport default WeatherDetails;\n","import * as axios from 'axios'\r\n\r\nconst apiKey = '431b14bdd798646063dbe3728107af4a'\r\n\r\nexport const getAdressData = () => {\r\n  return axios.get(`http://api.ipstack.com/check?access_key=${apiKey}`).then((response) => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nexport const getTemperature = async () => {\r\n  const adress = await getAdressData()\r\n  return axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${adress.city}&units=metric&appid=056b91ad44e2ed8399949215e7ec5215`)\r\n  .then(response => {\r\n    return response.data\r\n  })\r\n}","import { getAdressData, getTemperature } from \"../api/api\"\r\n\r\nconst SET_CITY = 'weather/SET_CITY'\r\nconst SET_LAT = 'weather/SET_LAT'\r\nconst SET_LON = 'weather/SET_LON'\r\nconst SET_TEMPERATURE = 'weather/SET_TEMPERATURE'\r\nconst SET_WEATHER_CODE = 'weather/SET_WEATHER_CODE'\r\nconst TOGGLE_FETCHING = 'weather/TOGGLE_FETCHING'\r\n\r\nconst initialState = {\r\n  city: null,\r\n  lat: '',\r\n  lon: '',\r\n  temperature: null,\r\n  weatherCode: 803,\r\n  fetching: true\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CITY: {\r\n      return {...state, city: action.city}\r\n    }\r\n    case SET_LAT: {\r\n      return {...state, lat: action.lat}\r\n    }\r\n    case SET_LON: {\r\n      return {...state, lon: action.lon}\r\n    }\r\n    case SET_TEMPERATURE: {\r\n      return {...state, temperature: action.temp}\r\n    }\r\n    case SET_WEATHER_CODE: {\r\n      return {...state, weatherCode: action.code}\r\n    }\r\n    case TOGGLE_FETCHING: {\r\n      return {...state, fetching: action.isFetch}\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst setCity = (city) => ({type: SET_CITY, city})\r\nconst setLat = (lat) => ({type: SET_LAT, lat})\r\nconst setLon = (lon) => ({type: SET_LON, lon})\r\nconst setTemperature = (temp) => ({type: SET_TEMPERATURE, temp})\r\nconst setWeatherCode = (code) => ({type: SET_WEATHER_CODE, code})\r\nexport const toggleIsFetching = (isFetch) => ({type: TOGGLE_FETCHING, isFetch})\r\n\r\nexport const getAdress = () => async (dispatch) => {\r\n  const response = await getAdressData()\r\n  dispatch(setCity(response.city))\r\n  dispatch(setLat(response.latitude))\r\n  dispatch(setLon(response.longitude))\r\n}\r\n\r\nexport const getTemp = () => async (dispatch) => {\r\n  const response = await getTemperature()\r\n  dispatch(toggleIsFetching(false))\r\n  dispatch(setTemperature(response.main.temp))\r\n  dispatch(setWeatherCode(response.weather[0].id))\r\n  dispatch(setLat(response.coord.lat))\r\n  dispatch(setLon(response.coord.lon))\r\n}\r\n\r\nexport default weatherReducer\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport WeatherDetails from './WeatherDetails';\nimport { getAdress, getTemp, toggleIsFetching } from '../redux/weather-reducer'\n\nclass WeatherDetailsContainer extends React.Component {\n    componentDidMount () {\n        this.props.getAdress()\n        this.props.getTemp()\n    }\n\n    render () {\n        return (\n            <>\n                <WeatherDetails city={this.props.city}\n                                temperature={this.props.temperature} />\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    city: state.weatherData.city,\n    temperature: state.weatherData.temperature\n})\n \nexport default connect(mapStateToProps, { getAdress, getTemp, toggleIsFetching }) (WeatherDetailsContainer);\n","import React from 'react';\nimport {connect} from 'react-redux'\n\nconst WeatherIcon = ({ weatherCode }) => {\n    const date = new Date();\n    const time = date.getHours();\n    const timeOfDay = (time > 7 && time < 18) ? 'day' : 'night';\n    const className = `weather-icon wi wi-owm-${timeOfDay}-${weatherCode}`;\n\n    return <i className={className}></i>;\n}\n\nconst mapStateToProps = (state) => ({\n    weatherCode: state.weatherData.weatherCode\n})\n \nexport default connect(mapStateToProps, {}) (WeatherIcon);","import WeatherDetailsContainer from \"./WeatherDetailsContainer\"\r\nimport WeatherIcon from \"./WeatherIcon\"\r\nimport '../App.css';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Main = (props) => {\r\n\r\n  const date = new Date()\r\n  const time = date.getHours()\r\n  return (\r\n    <div className=\"app\" data-hour={time}>\r\n        <WeatherIcon />\r\n        <WeatherDetailsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect((state) => ({isFetching: state.weatherData.fetching})) (Main)\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Main from './components/Main'\n\nfunction App({city, latitude, longitude}) {\n    console.log(latitude.toString())\n    console.log(longitude)\n    return (\n        <>\n            <Main /> \n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    city: state.weatherData.city,\n    latitude: state.weatherData.lat,\n    longitude: state.weatherData.lon\n})\n\nexport default connect(mapStateToProps, {}) (App)\n","import {  applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport weatherReducer from './weather-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nlet reducers = combineReducers({\r\n    weatherData: weatherReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport './index.css';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n   document.getElementById('root')\n);"],"sourceRoot":""}