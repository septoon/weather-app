{"version":3,"sources":["components/WeatherIcon.jsx","components/WeatherDetails.jsx","App.jsx","index.js"],"names":["WeatherIcon","_ref","time","weatherCode","className","concat","react_default","a","createElement","WeatherDetails","city","temperature","App","state","icon","fetching","fetchWeatherData","country_code","query","fetch","then","response","json","data","Date","getHours","_this","setState","Math","round","main","temp","weather","id","catch","error","console","fetchIP","log","this","_this$state","data-hour","components_WeatherIcon","components_WeatherDetails","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"uNASeA,MAPf,SAAAC,GAA4C,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,YAEnBC,EAAS,0BAAAC,OADIH,EAAO,GAAKA,EAAO,GAAM,MAAQ,QACrC,KAAAG,OAA0CF,GAEzD,OAAOG,EAAAC,EAAAC,cAAA,KAAGJ,UAAWA,KCKVK,MATf,SAAAR,GAA+C,IAArBS,EAAqBT,EAArBS,KAAMC,EAAeV,EAAfU,YAC5B,OACIL,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,mBACXE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,QAAQM,GACvBJ,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,eAAeO,EAA9B,aC8DGC,6MA7DXC,MAAQ,CACJC,KAAM,GACNZ,KAAM,EACNQ,KAAM,GACNC,YAAa,GACbR,YAAa,GACbY,UAAU,KAOdC,iBAAmB,SAACN,EAAMO,GACtB,IAGMC,EAAK,8BAAAb,OADA,oCAGXc,MAAK,GAAAd,OALQ,iCAKRA,OAJK,oBAIL,OAAAA,OAAwBK,EAAxB,KAAAL,OAAgCY,EAAhC,KAAAZ,OAAgDa,IAChDE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACF,IACMrB,GADO,IAAIsB,MACCC,WAElBC,EAAKC,SAAS,CACVzB,OACAQ,OACAC,YAAaiB,KAAKC,MAAMN,EAAKO,KAAKC,MAClC5B,YAAaoB,EAAKS,QAAQ,GAAGC,GAC7BlB,UAAU,MAGjBmB,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAGtCE,QAAU,WACNlB,MAAM,yBACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAnB,GAAA,IAAGS,EAAHT,EAAGS,KAAMO,EAAThB,EAASgB,aAAT,OAA4BS,EAAKV,iBAAiBN,EAAMO,KAC7DiB,MAAM,SAAAC,GAAK,OAAIC,QAAQE,IAAIH,yFA9BhCI,KAAKF,2CAiCA,IAAAG,EAC4DD,KAAK1B,MAA9DE,EADHyB,EACGzB,SAAUD,EADb0B,EACa1B,KAAMZ,EADnBsC,EACmBtC,KAAMQ,EADzB8B,EACyB9B,KAAMC,EAD/B6B,EAC+B7B,YAAaR,EAD5CqC,EAC4CrC,YAEjD,OAAOY,EACHT,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,OAAf,uDAEAE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,MAAMqC,YAAWvC,GAC5BI,EAAAC,EAAAC,cAACkC,EAAD,CACI5B,KAAMA,EACNX,YAAaA,EACbD,KAAMA,IACVI,EAAAC,EAAAC,cAACmC,EAAD,CACIjC,KAAMA,EACNC,YAAaA,YAzDfiC,mBCAlBC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.9f1169dd.chunk.js","sourcesContent":["import React from 'react';\n\nfunction WeatherIcon({ time, weatherCode }) {\n    const timeOfDay = (time > 7 && time < 18) ? 'day' : 'night';\n    const className = `weather-icon wi wi-owm-${timeOfDay}-${weatherCode}`;\n\n    return <i className={className}></i>;\n}\n\nexport default WeatherIcon;","import React from 'react';\n\nfunction WeatherDetails({ city, temperature }) {\n    return (\n        <div className=\"weather-details\">\n            <div className=\"city\">{city}</div>\n            <div className=\"temperature\">{temperature} &deg; C</div>\n        </div>\n    );\n}\n\nexport default WeatherDetails;","import React, { Component } from 'react';\n\nimport './App.css';\nimport WeatherIcon from './components/WeatherIcon';\nimport WeatherDetails from './components/WeatherDetails';\n\nclass App extends Component {\n    state = {\n        icon: '',\n        time: 1,\n        city: '',\n        temperature: '',\n        weatherCode: '',\n        fetching: true\n    }\n\n    componentDidMount() {\n        this.fetchIP();\n    }\n\n    fetchWeatherData = (city, country_code) => {\n        const baseUrl = `http://api.openweathermap.org`;\n        const path = `/data/2.5/weather`;\n        const appId = `459fc1107972f9ca8e39abe5f2583722`;\n        const query = `units=metric&lang=ru&appid=${appId}`;\n\n        fetch(`${baseUrl}${path}?q=${city},${country_code}&${query}`)\n            .then(response => response.json())\n            .then(data => {\n                const date = new Date();\n                const time = date.getHours();\n\n                this.setState({\n                    time,\n                    city,\n                    temperature: Math.round(data.main.temp),\n                    weatherCode: data.weather[0].id,\n                    fetching: false\n                });\n            })\n            .catch(error => console.error(error));\n    }\n\n    fetchIP = () => {\n        fetch('//freegeoip.net/json/')\n            .then(response => response.json())\n            .then(({ city, country_code }) => this.fetchWeatherData(city, country_code))\n            .catch(error => console.log(error));\n    }\n\n    render() {\n        const { fetching, icon, time, city, temperature, weatherCode } = this.state;\n\n        return fetching ?\n            <div className=\"app\">Загрузка...</div>\n            :\n            <div className=\"app\" data-hour={time}>\n                <WeatherIcon\n                    icon={icon}\n                    weatherCode={weatherCode}\n                    time={time} />\n                <WeatherDetails\n                    city={city}\n                    temperature={temperature} />\n            </div>;\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}